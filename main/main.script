
-- name, variations, outline num
theme_data = {
	{"metal tiles", 1, 1},     -- 1
	{"asphalt", 1, 1},         -- 2
	{"clean tiles", 1, 1},     -- 3
	{"cartoon", 3, 0},         -- 4
	{"wooden", 4, 1},          -- 5
	{"old bricks", 4, nil},    -- 6
	{"marble", 1, 1},          -- 7
	{"stones", 1 ,1},          -- 8
	{"blue circles", 1, nil},  -- 9
	{"rounded tile", 1, nil}   -- 10
}

current_theme = 10



function init(self)
	local display = defos.get_displays()
	local screen_w = display[1].bounds.width
	local screen_h = display[1].bounds.height - 36
	defos.disable_maximize_button()
	defos.disable_window_resize()

	--screen_w = 1650 ; screen_h = 874  -- smaller window
	--screen_w = 1650 ; screen_h = 600   -- for recording

	window_w = 640 * 4 ; window_h = 1152 * 4

	-- resize window if too big for display
	if screen_h <= window_h then
		local scale_ratio = window_h / (screen_h - 36)
		window_w = window_w / scale_ratio
		window_h = window_h / scale_ratio
	end

	defos.set_view_size((screen_w - window_w) / 2, ((screen_h - 36) - window_h) / 2, window_w, window_h)
	window_w = 640 ; window_h = 1152

	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "refresh_window_size")
	msg.post("@render:", "use_fixed_fit_projection", {near = -1, far = 1})

	msg.post("#game", "load")
end




function on_message(self, message_id, message, sender)
	if message_id == hash("start_game") then
		msg.post("#game", "load")


	elseif message_id == hash("proxy_loaded") then
		pprint(tostring(sender).." LOADED")

		msg.post(sender, "init")
		msg.post(sender, "enable")
	end
end




function gen_offscreen_pos(distance)
	local a, x, y = math.random(1,4)

	if a == 1 then     -- left
		x = -distance
		y = math.random(-distance, window_h + distance)
	elseif a == 2 then -- right
		x = window_w + distance
		y = math.random(-distance, window_h + distance)
	elseif a == 3 then -- down
		x = math.random(-distance, window_w + distance)
		y = -distance
	elseif a == 4 then -- up
		x = math.random(-distance, window_w + distance)
		y = window_h + distance
	end

	return x, y
end
