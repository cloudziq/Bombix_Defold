
local load_config

G_tile_size  = 64             -- in pixels
G_tiles_max_w, G_tiles_max_h = 10, 16



-- rotate type:
-- 1: can be rotated by 90
-- 2: full random rotation

--  1            2               3                   4:
--  variants:    rotate_type:    ON/OFF_variants:    highlight multiplier:
theme_data = {
	{1,           1,              nil,                1 },               -- 1
	{1,           1,              nil,                1 },               -- 2
	{1,           1,              nil,                1 },               -- 3
	{3,           1,              nil,                2 },               -- 4
	{3,           1,              nil,                1 },               -- 5
	{4,           1,              nil,                .5},               -- 6
	{1,           1,              nil,                1 },               -- 7
	{1,           1,              nil,                1 },               -- 8
	{1,           1,              nil,                1 },               -- 9
	{1,           1,              nil,                1 },               -- 10
	{1,           1,              true,               2 },               -- 11
	{1,           2,              nil,                .5},               -- 12
	{1,           1,              true,               2 },               -- 13
	{1,           2,              nil,                2 },               -- 14
	{3,           1,              nil,                1 },               -- 15
	{1,           2,              true,               1 },               -- 16
	{1,           1,              true,               2 },               -- 17
	{1,           1,              true,               2 },               -- 18
	{1,           2,              nil,                1 },               -- 19
	{1,           2,              nil,                .5},               -- 20
	{1,           2,              nil,                1 },               -- 21
	{1,           2,              nil,                1 },               -- 22
	{1,           1,              nil,                1 },               -- 23
	{1,           1,              true,               4 },               -- 24
	{1,           2,              true,               4 },               -- 25
	{1,           2,              nil,                1 },               -- 26
	{1,           2,              true,               12},               -- 27
}
--current_theme = 26


-- max board size: 10x16
-- board_x:  board_y:  bombs:  revealed tiles:
level_data = {
	{6,      6,        4,      1},        -- 1
	{6,      6,        1,      1},        -- 2
	{6,      7,        1,      1},        -- 3
	{6,      7,        1,      1},        -- 4
	{7,      7,        1,      1},        -- 5
	{7,      7,        1,      1},        -- 6
	{7,      8,        1,      1},        -- 7
	{7,      8,        1,      1},        -- 8
	{8,      8,        1,      2},        -- 9
	{8,      8,        1,      2},        -- 10
	{8,      9,        1,      2},        -- 11
	{8,      9,        1,      2},        -- 12
	{8,      10,       1,      2},        -- 13
	{8,      10,       1,      2},        -- 14
	{8,      11,       1,      2},        -- 15
	{8,      11,       1,      2},        -- 16
	{8,      12,       1,      3},        -- 17
	{8,      12,       1,      3},        -- 18
	{9,      13,       1,      3},        -- 19
	{9,      13,       1,      3},        -- 20
	{9,      14,       1,      3},        -- 21
	{9,      14,       1,      3},        -- 22
	{10,     14,       1,      3},        -- 23
	{10,     14,       1,      4},        -- 24
	{10,     15,       1,      4},        -- 25
	{10,     15,       1,      4},        -- 26
	{10,     16,       1,      4},        -- 27
	{10,     16,       1,      4},        -- 28
	{10,     16,       1,      4},        -- 29
	{10,     16,       1,      5},        -- 30
	{10,     16,       1,      5},        -- 31
	{10,     16,       1,      5},        -- 32
	{10,     16,       1,      5},        -- 33
	{10,     16,       1,      6},        -- 34
	{10,     16,       1,      6},        -- 35
}




function init(self)
	local temp_window_w, temp_window_h

	local display = defos.get_displays()
	local screen_w = display[1].bounds.width
	local screen_h = display[1].bounds.height - 36

	defos.disable_maximize_button()
	defos.disable_window_resize()

	window_w, window_h = 640, 1152
	temp_window_w = window_w * 2 ; temp_window_h = window_h * 2

	--screen_w = 1650 ; screen_h = 874  -- smaller window
	--screen_w = 1650 ; screen_h = 600   -- for recording

	-- resize window if too big for display
	if screen_h <= temp_window_h then
		local scale_ratio = temp_window_h / (screen_h - 36)
		temp_window_w = temp_window_w / scale_ratio
		temp_window_h = temp_window_h / scale_ratio
	end
	
	msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })
	defos.set_view_size((screen_w - temp_window_w) / 2, ((screen_h - 36) - temp_window_h) / 2, temp_window_w, temp_window_h)
	msg.post(".", "acquire_input_focus")
	load_config()
end




function on_message(self, message_id, message, sender)
	if message_id == hash("start_game") then
		msg.post("#game", "async_load")


	elseif message_id == hash("return to menu") then
		msg.post("main:/main#game", "unload")


	elseif message_id == hash("proxy_loaded") then
		pprint(tostring(sender).." LOADED")
		msg.post(sender, "init")
		msg.post(sender, "enable")


	elseif message_id == hash("proxy_unloaded") then
		pprint(tostring(sender).." UNLOADED")
		msg.post("main:/gui#main_menu", "enable")
	end
end




function gen_offscreen_pos(distance)
	local a, x, y = math.random(1,4)

	if a == 1 then     -- left
		x = -distance
		y = math.random(-distance, window_h + distance)
	elseif a == 2 then -- right
		x = window_w + distance
		y = math.random(-distance, window_h + distance)
	elseif a == 3 then -- down
		x = math.random(-distance, window_w + distance)
		y = -distance
	elseif a == 4 then -- up
		x = math.random(-distance, window_w + distance)
		y = window_h + distance
	end

	return x, y
end




function animate_node(node, scale, range, param)
	local pos, prop = gui.get_position(node)
	prop = not param and "scale" or "scale."..param

	gui.animate(node, prop, scale * (1 + range), go.EASING_INOUTSINE, .6, 0, function()
		gui.animate(node, prop, scale * (1 - range), go.EASING_INOUTSINE, .6, 0, function()
			animate_node(node, scale, range, param)
		end)
	end)

end


-- sound_type:    true = confirm,    false = back,    nil = no_sound
function animate_clicked(node, multiplier, anim_speed, sound_type, callback_function)
	local node = gui.get_node(node)
	local rot = gui.get_rotation(node)
	local scale = gui.get_scale(node)
	local dir = math.random(0, 1) == 1 and 360 or -360
	local anim_speed = anim_speed > 0 and anim_speed or .4
	if sound_type ~= nil then
		sound_speed = sound_type and 1.8 or 1
		sound.play("main:/sound#menu_confirm", {speed = sound_speed})
	end

	gui.cancel_animation(node, "scale")
	gui.animate(node, "color", vmath.vector4(0), gui.EASING_LINEAR, anim_speed)
	gui.animate(node, "rotation", vmath.vector3(rot.x, rot.y, dir), gui.EASING_LINEAR, anim_speed)
	gui.animate(node, "scale", vmath.vector3(scale.x * multiplier, scale.y * multiplier, scale.z), gui.EASING_LINEAR, anim_speed, 0, callback_function)
end




local save_version = 1

function load_config()
	local file = sys.get_save_file("Bombix", "config.dzq")
	local data = sys.load(file)

	if data.save_version ~= save_version then
		G_settings = {
			sound_vol =  1,
			music_vol = .5,
			theme = 1,
			freeplay_width = 10,
			freeplay_height = 10,
			freeplay_bombs = 12,
			save_version = save_version
		}
	else
		G_settings = data
	end

	sound.set_group_gain("sound", G_settings.sound_vol)
	sound.set_group_gain("music", G_settings.music_vol)
end


function save_config()
	local file = sys.get_save_file("Bombix", "config.dzq")
	sys.save(file, G_settings)
end
