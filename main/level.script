
G_tile_size  = 64   -- in pixels
G_allow_board_input = true

-- tile status:
-- 0: unrevealed
-- 1: contains a bomb
-- 2: revealed
-- 3: detector tile
local board_data = {}  --[tile_x][tile_y][ [tile_id, marker_id, bomb_id, counter_id], tile_status, bomb_count]
local tiles_left, markers, hold_time
local x_def, y_def
local allow_gui_input, restart, detector_mode, touch_id = false, false, false, false, false

local current_level, board_tiles_x, board_tiles_y, bombs_amount = 0


-- local functions:
local level_prepare, tile_marker, tile_reveal, generate_board, reset_board, gen_num, gen_pos, show_starter_tiles
local level_complete, game_over




function init(self)
	msg.post(".", "acquire_input_focus")
	level_prepare()
end




function update(self, dt)
	if self.check_input then
		if socket.gettime() >= hold_time then
			self.check_input = false
			tile_marker(tile_num_x, tile_num_y)
		end
	end
end




function on_input(self, action_id, action)
	local tile_exists = true
	local x, y

	if G_allow_board_input then
		if action_id ~= nil and action.pressed then
			tile_num_x = math.ceil((action.x - (window_w - (board_tiles_x * G_tile_size)) / 2) / G_tile_size)
			tile_num_y = math.ceil((action.y - (window_h - (board_tiles_y * G_tile_size)) / 2) / G_tile_size)
			if tile_num_x < 1 or tile_num_x > board_tiles_x or tile_num_y < 1 or tile_num_y > board_tiles_y then
				tile_exists = false
			end
		end

		if tile_exists then
			x, y = tile_num_x, tile_num_y

			if action_id == hash("touch") then
				if action.pressed then
					hold_time = socket.gettime() + .44
					self.check_input = true

				elseif action.released and self.check_input then
					self.check_input  = false
					local tile_stat   = board_data[x][y][2]
					local counter     = board_data[x][y][3]
					local marker_id   = board_data[x][y][1][2]

					-- disallow clicking on markers or empty revealed tiles
					if marker_id == 0 and ((tile_stat <= 1) or (tile_stat >= 2 and counter ~= 0)) then
						if touch_id then msg.post(touch_id, "delete") end
						touch_id = factory.create("#touch_factory", vmath.vector3(action.x, action.y, 1))
					end
				end


			elseif action_id == hash("mark") and action.pressed then
				tile_marker(tile_num_x, tile_num_y)
			end
		end
	end
end




function on_message(self, message_id, message)
	if message_id == hash("next level") then
		self.check_input = false
		level_prepare()


	elseif message_id == hash("restart") and allow_gui_input then
		G_allow_board_input = false
		allow_gui_input = false
		reset_board()


	elseif message_id == hash("detector") then
		if detector_mode then
			detector_mode = false
		else
			detector_mode = true
		end
	end
end




function tile_marker(x, y)
	local id = board_data[x][y][1][2]
	local cx = ((window_w - (board_tiles_x * G_tile_size)) / 2) + ((x - 1) * G_tile_size) + (G_tile_size / 2)
	local cy = ((window_h - (board_tiles_y * G_tile_size)) / 2) + ((y - 1) * G_tile_size) + (G_tile_size / 2)

	if board_data[x][y][2] < 2  then
		if id == 0 then
			markers = markers + 1
			id = factory.create("#tile_marker_factory", vmath.vector3(0, 0, .0002))
			board_data[x][y][1][2] = id
			go.set_parent(id, board_data[x][y][1][1])
			sound.play("/sound#tile_mark", {speed = 1.8})
		else
			markers = markers - 1
			msg.post(id, "delete")
			board_data[x][y][1][2] = 0
			sound.play("/sound#tile_mark", {speed = 3.4})
		end
	end

	msg.post("/gui#level", "update display", {type = "marker", amount = markers})
end




function check_clicked_tile(x, y)  -- called from touch collider
	if G_allow_board_input then
		local tile = board_data[x][y][2]

		-- handle tile detector
		if tile ~= 1 and board_data[x][y][3] ~= 0 then
			local detector
			if board_data[x][y][2] == 3 then detector = true else detector = false end
			msg.post(touch_id, "show range", {board_x = board_tiles_x, board_y = board_tiles_y, size = G_tile_size, detector = detector})
		end

		if tile == 0 then
			reveal_sound_allow = true
			tile_reveal(x, y, detector_mode)
			sound.play("/sound#plumk", {gain = .4, speed = math.random(80, 120) / 100})
		elseif tile == 1 then
			game_over(x, y)
		end

		if detector_mode then
			detector_mode = false
			msg.post("/gui#level", "remove picked node")
		end
	end
end




local near_coords = {
	{-1,  1}, {0,  1}, {1,  1},
	{-1,  0},          {1,  0},
	{-1, -1}, {0, -1}, {1, -1}
}

local near_coords_detector = {
	{-2,  2}, {-1,  2}, { 0,  2}, { 1,  2}, { 2,  2},
	{-2,  1}, {-1,  1}, { 0,  1}, { 1,  1}, { 2,  1},
	{-2,  0}, {-1,  0},           { 1,  0}, { 2,  0},
	{-2, -1}, {-1, -1}, { 0, -1}, { 1, -1}, { 2, -1},
	{-2, -2}, {-1, -2}, { 0, -2}, { 1, -2}, { 2, -2}
}

function tile_reveal(x, y, detector, neighbours_table, count)
	local cx, cy, particle_type
	local detector = detector or false
	local neighbours_table = neighbours_table or {}
	local count = count or 0  -- for multi tiles reveal sound only

	tiles_left = tiles_left - 1
	msg.post("/gui#level", "update display", {type = "tile", amount = tiles_left})

	if not detector then
		board_data[x][y][2] = 2
	else
		gen_num(x, y, detector)
		board_data[x][y][2] = 3
	end

	if tiles_left == 0 then
		level_complete()
	end

	if reveal_sound_allow and count > 0 then
		reveal_sound_allow = false
		sound.play("/sound#droplet")
		sound.play("/sound#reveal")
	end

	for index, value in ipairs(near_coords) do
		cx = x + value[1]
		cy = y + value[2]

		if (cx >= 1 and cx <= board_tiles_x) and (cy >= 1 and cy <= board_tiles_y) then
			if board_data[x][y][3] == 0 and board_data[cx][cy][2] ~= 1 then
				table.insert(neighbours_table, {cx, cy})
			else
				--timer.delay(0, false, function()
					msg.post(board_data[x][y][1][4], "reveal digit", {rot = go.get(board_data[x][y][1][1], "euler.z")})
				--end)
			end
		end
	end

	if #neighbours_table == 0 then
		particle_type = ""
	else
		-- process neighbours:
		for index, _ in ipairs(neighbours_table) do
			local x = neighbours_table[index][1]
			local y = neighbours_table[index][2]

			-- process only unrevealed tiles
			if board_data[x][y][2] == 0 then
				tile_reveal(x, y, false, neighbours_table, count + 1)
			end
		end
		particle_type = "_multi"
	end

	-- remove markers
	if board_data[x][y][1][2] ~= 0 then
		msg.post(board_data[x][y][1][2], "delete")
		board_data[x][y][1][2] = 0
		markers = markers - 1
	end

	msg.post(board_data[x][y][1][1], "reveal tile", {type = particle_type, detector = detector})
end




function level_prepare()
	local delay = .2
	current_level = current_level + 1

	if current_level > 1 then
		reset_board()
	end

	timer.delay(delay, false, function()
		board_tiles_x = level_data[current_level][1]
		board_tiles_y = level_data[current_level][2]

		bombs_amount = 0
		for i = 1, current_level do
			bombs_amount  = bombs_amount + level_data[i][3]
		end

		if current_level == 1 then generate_board() end
	end)
end




function level_complete()
	G_allow_board_input = false
	allow_gui_input = false
	msg.post("/gui#level", "hide display")
	msg.post("/gui#level", "input switch", {action = false})
	msg.post("/gui#level_completed", "show")
	sound.play("/sound#board_completed")
end




function game_over(num_x, num_y)
	local x, y, message
	restart             = true
	G_allow_board_input = false

	for x = 1, board_tiles_x do
		for y = 1, board_tiles_y do

			-- color the markers as correctly placed or not
			if board_data[x][y][1][2] ~= 0 then
				if board_data[x][y][2] == 1 then
					msg.post(board_data[x][y][1][2], "mark as correct")
				else
					msg.post(board_data[x][y][1][2], "mark as incorrect")
				end
			end

			-- check if tile contains a bomb, and if this specific bomb was ignited
			if board_data[x][y][2] == 1 then
				if x == num_x and y == num_y then
					message = true
				else
					message = false
				end
				msg.post(board_data[x][y][1][3], "reveal bomb", {is_clicked_bomb = message, rot = go.get(board_data[x][y][1][1], "euler.z")})
			end
		end
	end
end




function generate_board()
	local x_def = ((window_w - (board_tiles_x * G_tile_size)) / 2) + (G_tile_size / 2)
	local y_def = ((window_h - (board_tiles_y * G_tile_size)) / 2) + (G_tile_size / 2)
	local x, y, cx, cy = x_def, y_def, bomb

	board_data = {}
	tiles_left = (board_tiles_x * board_tiles_y) - bombs_amount
	markers = 0

	-- generate tiles
	for a = 1, board_tiles_x do
		table.insert(board_data, {})

		for b = 1, board_tiles_y do
			local id = factory.create("#tile_factory", vmath.vector3(x, y, .5))
			board_data[a][b] = {{id, 0, 0, 0}, 0, 0}
			y = y + G_tile_size
		end
		y = y_def
		x = x + G_tile_size
	end


	-- generate bombs:
	x, y = gen_pos()
	for bomb = 1, bombs_amount do
		while board_data[x][y][2] == 1 do x, y = gen_pos() end
		board_data[x][y][2] = 1
		cx = x_def + ((x - 1) * G_tile_size)
		cy = y_def + ((y - 1) * G_tile_size)
		local id = factory.create("#bomb_factory", vmath.vector3(0,2,0))
		go.set_parent(id, board_data[x][y][1][1])
		board_data[x][y][1][3] = id
	end


	-- generate numbers:
	for x = 1, board_tiles_x do
		for y = 1, board_tiles_y do
			if board_data[x][y][2] ~= 1 then
				gen_num(x, y)
			end
		end
	end


	timer.delay(1.1, false, function()
		msg.post("/gui#level", "show display", {level = current_level, bombs = bombs_amount, tiles = tiles_left})
		msg.post("/gui#level", "input switch", {action = true})
		show_starter_tiles()
		G_allow_board_input = true
		allow_gui_input = true
	end)

	restart       = false
	detector_mode = false
end




function gen_num(x, y, detector)
	local counter, cx, cy = 0
	local detector = detector or false
	local coords = not detector and near_coords or near_coords_detector

	for index, _ in ipairs(coords) do
		cx = x + coords[index][1]
		cy = y + coords[index][2]

		if (cx >= 1 and cx <= board_tiles_x) and (cy >= 1 and cy <= board_tiles_y) then
			if board_data[cx][cy][2] == 1 then
				counter = counter + 1
			end
		end
	end

	if counter > 0 then
		local id
		cx = ((window_w - (board_tiles_x * G_tile_size)) / 2) + ((x - 1) * G_tile_size + (G_tile_size / 2))
		cy = ((window_h - (board_tiles_y * G_tile_size)) / 2) + ((y - 1) * G_tile_size + (G_tile_size / 2))

		if not detector or board_data[x][y][1][3] == 0 then
			id = factory.create("/main#counter_factory", vmath.vector3(0,0,.0001))
			go.set_parent(id, board_data[x][y][1][1])
		end
		label.set_text(msg.url(nil, id, "label"), tostring(counter))
		board_data[x][y][1][4] = id
	end

	board_data[x][y][3] = counter
end




function show_starter_tiles()
	local amount, message, add_detector = level_data[current_level][4]

	add_detector = amount > 1 and 1 or 0
	for a = 1, amount + add_detector do
		local x, y = gen_pos()
		while board_data[x][y][3] == 0 or board_data[x][y][2] > 0 do x, y = gen_pos() end
		board_data[x][y][2] = 2
		if a == amount + add_detector and amount > 2 then
			tile_reveal(x, y, true)
		else
			tile_reveal(x, y, false)
		end
		-- timer.delay(0, false, function()
		-- 	msg.post(board_data[x][y][1][4], "reveal digit", {rot = go.get(board_data[x][y][1][1], "euler.z")})
		-- end)
		--tiles_left = tiles_left - 1
	end
end




function gen_pos()
	local x, y = math.random(1, board_tiles_x), math.random(1, board_tiles_y)
	return x, y
end




function reset_board()
	local x, y, item, id
	local delay

	if restart then
		delay = 2.2
		msg.post(board_data[tile_num_x][tile_num_y][1][3], "detonate bomb")
		msg.post(board_data[1][1][1][1], "set Z")

		for x = 1, board_tiles_x do
			for y = 1, board_tiles_y do
				if board_data[x][y][2] == 1 then
					msg.post(board_data[x][y][1][3], "hide sprite")    -- hide bombs
				end
			end
		end
	else
		delay = .2
	end

	-- delete all level tiles, labels, bombs and markers:
	timer.delay(delay, false, function()
		for x = 1, board_tiles_x do
			for y = 1, board_tiles_y do
				for item = 1, 4 do
					id = board_data[x][y][1][item]
					if id ~= 0 then
						msg.post(id, "delete")
					end
				end
			end
		end

		timer.delay(.1, false, function()
			for _, id in ipairs(BG_table) do
				msg.post(id, "shuffle BG")
			end
			generate_board()
		end)
	end)

	if touch_id then
		msg.post(touch_id, "delete") ; touch_id = nil
	end
end
