local slider_active = false
local slider_active_sound = false
local slider_active_music = false

local back_node_active, checkbox_range
local anim_back_node = false

local restore_prev, prev_menu


-- local functions:
local checkbox_set, slider, theme_selector




function init(self)
	msg.post("#", "disable")
end





function on_input(self, action_id, action)
	if action_id == hash("touch") then
		if gui.pick_node(gui.get_node("pointer_sound"), action.x, action.y) then
			slider_active = true
			slider_active_sound = true
		elseif gui.pick_node(gui.get_node("pointer_music"), action.x, action.y) then
			slider_active = true
			slider_active_music = true
		end


		if action.pressed then
			if gui.pick_node(gui.get_node("arrow_L"), action.x, action.y) then
				theme_selector(-1)

			elseif gui.pick_node(gui.get_node("arrow_R"), action.x, action.y) then
				theme_selector(1)
			end
		end
	end


	if slider_active == true then
		if slider_active_sound == true then
			G_settings.sound_vol = string.format("%.2f", slider("pointer_sound", -175, 175, action))
			sound.set_group_gain("sound", G_settings.sound_vol)
		elseif slider_active_music == true then
			G_settings.music_vol = string.format("%.2f", slider("pointer_music", -175, 175, action))
			sound.set_group_gain("music", G_settings.music_vol)
		end
	end


	if action.released then 
		slider_active = false
		slider_active_sound = false
		slider_active_music = false
	end


	if gui.pick_node(gui.get_node("checkbox_range_C"), action.x, action.y) and action.pressed then
		if checkbox_range then checkbox_range = false else checkbox_range = true end
		checkbox_set()
		sound.play("/sound#menu_select")
		G_settings.range_display = checkbox_range
	end


	if back_node_active then
		if gui.pick_node(gui.get_node("back_button_T"), action.x, action.y) then
			if not anim_back_node then
				anim_back_node = true
				animate_node(gui.get_node("back_button_C"), vmath.vector3(1,1,1), .06, "x")
				animate_node(gui.get_node("back_button_T"), vmath.vector3(.5, .5, 1), .08)
			end

			if action_id == hash("touch") and action.released then
				back_node_active = false
				animate_clicked("back_button_C", 2, 0, false, function()
					msg.post("#", "hide")
				end)
			end
		else
			gui.animate(gui.get_node("back_button_C"), "scale", vmath.vector3(1,1,1), go.EASING_INOUTSINE, 1)
			gui.animate(gui.get_node("back_button_T"), "scale", vmath.vector3(.5, .5, 1), go.EASING_INOUTSINE, 1)
			anim_back_node = false
		end
	end
end




function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		back_node_active = true
		checkbox_range = G_settings.range_display

		gui.reset_nodes()
		gui.animate(gui.get_node("BG"),  "scale", vmath.vector3(.98, .99, 1), gui.EASING_INOUTSINE, 16, 2, nil, gui.PLAYBACK_LOOP_PINGPONG)
		gui.animate(gui.get_node("BG2_1"), "scale", vmath.vector3(1.4, 1.5 ,1), gui.EASING_INOUTSINE, 14, 2, nil, gui.PLAYBACK_LOOP_PINGPONG)
		gui.animate(gui.get_node("BG2_2"), "scale", vmath.vector3(1.4, 1.5 ,1), gui.EASING_INOUTSINE, 18, 4, nil, gui.PLAYBACK_LOOP_PINGPONG)

		gui.animate(gui.get_node("arrow_L"), "scale", vmath.vector3(1.1), gui.EASING_INOUTSINE, .8, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
		gui.animate(gui.get_node("arrow_R"), "scale", vmath.vector3(1.1), gui.EASING_INOUTSINE, .8, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)

		if message.restore_prev then
			restore_prev = true
			prev_menu = sender
		else
			restore_prev = false
		end

		set_sliders()
		checkbox_set()
		theme_selector(0)
		msg.post(".", "acquire_input_focus")
		msg.post("#", "enable")




	elseif message_id == hash("hide") then
		msg.post("#", "disable")
		if restore_prev then
			msg.post(prev_menu, "show")
		end

		save_config()
	end
end




function checkbox_set()
	if checkbox_range then
		gui.set_enabled(gui.get_node("checkbox_range_off"), false)
		gui.set_color(gui.get_node("checkbox_range_tex"), vmath.vector3(.5, 1.2, .5))
	else
		gui.set_enabled(gui.get_node("checkbox_range_off"), true)
		gui.set_color(gui.get_node("checkbox_range_tex"), vmath.vector3(1.2, .5, .5))
	end
end




function slider(pointer, left, right, action)
	local pos_center, pos_pointer, pos
	pos = vmath.vector3(action.x, action.y , 0)
	pos_pointer = gui.get_position(gui.get_node(pointer))
	pos_center  = (window_w / 2)


	if pos.x - pos_center < left then 
		pos.x = left
	elseif pos.x - pos_center > right then
		pos.x = right
	else
		pos.x = action.x - pos_center
	end

	gui.set_position(gui.get_node(pointer), vmath.vector3(pos.x, pos_pointer.y, 0))
	return (pos.x / (right * 2)) + .5
end




function set_sliders()
	pos = gui.get_position(gui.get_node("pointer_sound"))
	pos.x = G_settings.sound_vol * 350 - 175
	gui.set_position(gui.get_node("pointer_sound"), vmath.vector3(pos.x, pos.y, 0))
	
	pos = gui.get_position(gui.get_node("pointer_music"))
	pos.x = G_settings.music_vol * 350 - 175
	gui.set_position(gui.get_node("pointer_music"), vmath.vector3(pos.x, pos.y, 0))
end




function theme_selector(dir)
	local theme_number = G_settings.theme

	if dir ~= 0 then
		if theme_number + dir == 0 then
			theme_number = #theme_data
		elseif theme_number + dir > #theme_data then
			theme_number = 1
		else
			theme_number = theme_number + dir
		end

		sound.play("/sound#menu_select")
	end

	local node = gui.get_node("tile")
	local theme = theme_data[theme_number]
	local texture
	if theme[1] == 1 then
		if not theme[3] then
			texture = "tile"..theme_number
		else
			texture = "tile"..theme_number.."_ON"
		end
	else
		texture = "tile"..theme_number.."_"..math.random(1, theme[1])
	end

	gui.play_flipbook(node, texture)
	G_settings.theme = theme_number
end
