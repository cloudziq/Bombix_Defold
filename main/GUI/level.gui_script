
-- local variables:
local picked_tile_state
local allow_input = false, true




function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post(".", "disable")
end




function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		if gui.pick_node(gui.get_node("restart button_T"), action.x, action.y) and allow_input then
			allow_input = false
			msg.post("/main#level", "restart")
			msg.post("#", "hide display", {speed = 0.1})
			animate_clicked("restart button_C", 2, .8, false)
		end


		if gui.pick_node(gui.get_node("tile detector"), action.x, action.y) and picked_tile_state ~= 0 then
			if G_allow_board_input then
				msg.post("/main#level", "detector")

				if not picked_tile_state then
					msg.post("#", "special tiles display", {state = "true"})
				else
					msg.post("#", "special tiles display", {state = "false"})
				end
			end
		end
	end
end




function on_message(self, message_id, message)
	if message_id == hash("show display") then
		gui.reset_nodes()
		msg.post(".", "enable")
		picked_tile_state = false

		gui.set_text(gui.get_node("bomb amount"), tostring(message.bombs))
		gui.set_text(gui.get_node("tile amount"), tostring(message.tiles))
		gui.set_color(gui.get_node("tile detector"), vmath.vector4(1,1, 4 * theme_data[G_settings.theme][4], 1))

		if theme_data[G_settings.theme][1] == 1 then
			if theme_data[G_settings.theme][3] == nil then
				gui.play_flipbook(gui.get_node("tile icon"), "tile"..G_settings.theme)
				gui.play_flipbook(gui.get_node("tile detector"),  "tile"..G_settings.theme)
			else
				gui.play_flipbook(gui.get_node("tile icon"), "tile"..G_settings.theme.."_ON")
				gui.play_flipbook(gui.get_node("tile detector"),  "tile"..G_settings.theme.."_ON")
			end
		else
			local num = math.random(1, theme_data[G_settings.theme][1])
			gui.play_flipbook(gui.get_node("tile icon"), "tile"..G_settings.theme.."_"..num)
			gui.play_flipbook(gui.get_node("tile detector"),  "tile"..G_settings.theme.."_"..num)
		end

		if G_freeplay then
			gui.set_text(gui.get_node("level"), "FREEPLAY")
			gui.set_enabled(gui.get_node("level number"), false)
		else
			gui.set_text(gui.get_node("level number"), tostring(message.level))
		end
		gui.set_color(gui.get_node("marker icon"), vmath.vector4(.6, 1, .65, .6))
		gui.set_scale(gui.get_node("marker icon"), vmath.vector3(5,5,1))
		gui.set_text(gui.get_node("marker amount"), "0")
		gui.animate(gui.get_node("marker icon"), "scale", 8, gui.EASING_INOUTSINE, 2, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
		gui.animate(gui.get_node("bomb icon"), "scale", 1.1, gui.EASING_INOUTSINE, .8, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
		gui.play_flipbook(gui.get_node("detector anim"), "anim")




	elseif message_id == hash("update display") then
		if message.type == "marker" then
			gui.set_text(gui.get_node("marker amount"), tostring(message.amount))
		elseif message.type == "tile" then
			gui.set_text(gui.get_node("tile amount"), tostring(message.amount))
		end




	elseif message_id == hash("hide display") then
		local speed = message.speed or 2
		gui.animate(gui.get_node("level info_C"),     "color.w", 0, go.EASING_INSINE, speed)
		gui.animate(gui.get_node("special tiles_C"),  "color.w", 0, go.EASING_INSINE, speed)
		gui.animate(gui.get_node("tile detector"),    "color.w", 0, go.EASING_INSINE, speed)
		gui.animate(gui.get_node("detector anim"),    "color.w", 0, go.EASING_INSINE, speed)
		--gui.animate(gui.get_node("restart button_C"), "color.w", 0, go.EASING_INSINE, speed)




	elseif message_id == hash("input switch") then
		if message.action then
			allow_input = true
		else
			allow_input = false
		end




	elseif message_id == hash("special tiles display") then
		if message.state == "true" then         -- is picked
			node = gui.get_node("tile detector")
			gui.animate(node, "color", vmath.vector3(.2, .2, 4 * theme_data[G_settings.theme][4], 1), go.EASING_INOUTCIRC, .4, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
			gui.animate(node, "scale", vmath.vector3(.4), go.EASING_INOUTCIRC, .4, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
			sound.play("/sound#special_tile_pickup")
			picked_tile_state = true


		elseif message.state == "false" then    -- normal
			local tim
			node = gui.get_node("tile detector")
			gui.cancel_animation(node, "color")
			gui.set_color(node, vmath.vector4(1,1,4,1))
			tim = timer.delay(0.02, true, function()
				local scale = gui.get_scale(node)
				if scale.x >= 0.384 then
					timer.cancel(tim)
					gui.cancel_animation(node, "scale")
					gui.animate(node, "scale", vmath.vector3(.28), go.EASING_INOUTSINE, .6)
				end
			end)
			sound.play("/sound#special_tile_pickup", {speed = .6})
			picked_tile_state = false


		elseif message.state == "hide" then
			local node = gui.get_node("tile detector")
			local scale = gui.get_scale(node)
			gui.cancel_animation(node, "color")
			gui.cancel_animation(node, "scale")

			gui.animate(gui.get_node("detector anim"), "color", vmath.vector4(0), gui.EASING_LINEAR, 1.64)
			if message.silent_hide then
				gui.animate(node, "scale", vmath.vector3(scale.x * 2, scale.y * 2, scale.z), gui.EASING_LINEAR, 1.64)
				gui.animate(node, "color", vmath.vector4(0), gui.EASING_LINEAR, 1.64)
			else
				animate_clicked("tile detector", 4, 1.48, nil, function()
					gui.set_enabled(gui.get_node("detector anim"), false)
				end)
			end
			picked_tile_state = 0
		end
	end
end
