
-- local variables:
local allow_input = false, true




function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post(".", "disable")
end




function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		if gui.pick_node(gui.get_node("restart button_T"), action.x, action.y) and allow_input then
			msg.post("/main#level", "restart")
			msg.post("#", "hide display", {speed = 0.1})


		elseif gui.pick_node(gui.get_node("tile detector"), action.x, action.y) and gui.is_enabled(gui.get_node("tile detector")) then
			if G_allow_board_input then
				msg.post("/main#level", "detector")

				if not picked_node then
					msg.post("#", "special tiles display", {state = "true"})
				else
					msg.post("#", "special tiles display", {state = "false"})
				end
			end
		end
	end
end




function on_message(self, message_id, message)
	if message_id == hash("show display") then
		gui.reset_nodes()
		msg.post(".", "enable")

		gui.set_text(gui.get_node("bomb amount"), tostring(message.bombs))
		gui.set_text(gui.get_node("tile amount"), tostring(message.tiles))
		gui.set_color(gui.get_node("tile detector"), vmath.vector4(.4, .5, 2 * theme_data[G_theme][4], 1))

		if theme_data[G_theme][1] == 1 then
			if theme_data[G_theme][3] == nil then
				gui.play_flipbook(gui.get_node("tile icon"), "tile"..G_theme)
				gui.play_flipbook(gui.get_node("tile detector"),  "tile"..G_theme)
			else
				gui.play_flipbook(gui.get_node("tile icon"), "tile"..G_theme.."_ON")
				gui.play_flipbook(gui.get_node("tile detector"),  "tile"..G_theme.."_ON")
			end
		else
			local num = math.random(1, theme_data[G_theme][1])
			gui.play_flipbook(gui.get_node("tile icon"), "tile"..G_theme.."_"..num)
			gui.play_flipbook(gui.get_node("tile detector"),  "tile"..G_theme.."_"..num)
		end

		gui.set_text(gui.get_node("level number"), tostring(message.level))
		gui.set_color(gui.get_node("marker icon"), vmath.vector4(.6, 1, .65, .6))
		gui.set_scale(gui.get_node("marker icon"), vmath.vector3(5,5,1))
		gui.set_text(gui.get_node("marker amount"), "0")
		gui.animate(gui.get_node("marker icon"), "scale", 8, gui.EASING_INOUTSINE, 2, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
		gui.animate(gui.get_node("bomb icon"), "scale", 1.1, gui.EASING_INOUTSINE, .8, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
		gui.play_flipbook(gui.get_node("detector anim"), "anim")




	elseif message_id == hash("update display") then
		if message.type == "marker" then
			gui.set_text(gui.get_node("marker amount"), tostring(message.amount))
		elseif message.type == "tile" then
			gui.set_text(gui.get_node("tile amount"), tostring(message.amount))
		end




	elseif message_id == hash("hide display") then
		local speed = message.speed or 2
		gui.animate(gui.get_node("level info_C"),     "color.w", 0, go.EASING_INSINE, speed)
		gui.animate(gui.get_node("special tiles_C"),  "color.w", 0, go.EASING_INSINE, speed)
		gui.animate(gui.get_node("tile detector"),    "color.w", 0, go.EASING_INSINE, speed)
		gui.animate(gui.get_node("detector anim"),    "color.w", 0, go.EASING_INSINE, speed)
		gui.animate(gui.get_node("restart button_C"), "color.w", 0, go.EASING_INSINE, speed)




	elseif message_id == hash("input switch") then
		if message.action then
			allow_input = true
		else
			allow_input = false
		end




	elseif message_id == hash("special tiles display") then
		if message.state == "true" then         -- is picked
			node = gui.get_node("special tiles_C")
			gui.animate(node, "color", vmath.vector3(.2, .2, 1, 1), go.EASING_INOUTCIRC, .4, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
			node = gui.get_node("tile detector")
			gui.animate(node, "scale", vmath.vector3(.4), go.EASING_INOUTCIRC, .4, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)

		elseif message.state == "false" then    -- normal
			node = gui.get_node("special tiles_C")
			gui.cancel_animation(node, "color")
			gui.set_color(node, vmath.vector3(1))
			node = gui.get_node("tile detector")
			gui.cancel_animation(node, "scale")
			gui.set_scale(node, vmath.vector3(.28))

		elseif message.state == "hide" then
			gui.set_enabled(gui.get_node("tile detector"), false)
			gui.set_enabled(gui.get_node("detector anim"), false)
		end
	end
end
